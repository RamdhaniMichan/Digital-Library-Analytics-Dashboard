basePath: /api
definitions:
  model.AnalyticsResponse:
    properties:
      books_available:
        type: integer
      books_borrowed:
        type: integer
      total_books:
        type: integer
      total_members:
        type: integer
      total_transactions:
        type: integer
    type: object
  model.Book:
    properties:
      author:
        type: string
      category_id:
        type: integer
      created_by:
        type: integer
      id:
        type: integer
      isbn:
        type: string
      quantity:
        type: integer
      title:
        type: string
    type: object
  model.BookWithCategory:
    properties:
      author:
        type: string
      category:
        $ref: '#/definitions/model.Category'
      created_by:
        type: integer
      isbn:
        type: string
      quantity:
        type: integer
      title:
        type: string
    type: object
  model.Category:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  model.Credentials:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  model.Lending:
    properties:
      book_id:
        type: integer
      borrowed_date:
        type: string
      created_by:
        type: integer
      due_date:
        type: string
      id:
        type: integer
      member_id:
        type: integer
      return_date:
        type: string
      status:
        type: string
    type: object
  model.Member:
    properties:
      email:
        type: string
      id:
        type: integer
      joined_date:
        type: string
      name:
        type: string
      phone:
        type: string
      status:
        type: string
      user_id:
        type: integer
    type: object
  model.RegisterRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
      role:
        type: string
    type: object
  model.User:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      role:
        type: string
    type: object
  utils.ErrorResponse:
    properties:
      message:
        example: Internal Server Error
        type: string
      status:
        example: 500
        type: integer
    type: object
  utils.Paginate:
    properties:
      limit:
        type: integer
      page:
        type: integer
      total_items:
        type: integer
      total_pages:
        type: integer
    type: object
  utils.SuccessResponse:
    properties:
      data: {}
      message:
        example: Success
        type: string
      status:
        example: 200
        type: integer
    type: object
  utils.TokenResponse:
    properties:
      token:
        example: abc123
        type: string
    type: object
host: localhost:8081
info:
  contact:
    email: your-email@domain.com
    name: API Support
  description: This is a digital library server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Digital Library API
  version: "1.0"
paths:
  /v1/analytics:
    get:
      consumes:
      - application/json
      description: Retrieve analytics data for the dashboard
      parameters:
      - description: Bearer token for authentication
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.AnalyticsResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get Analytics Data
      tags:
      - Analytics
  /v1/books:
    get:
      consumes:
      - application/json
      description: Get all books
      parameters:
      - description: Bearer token for authentication
        in: header
        name: Authorization
        required: true
        type: string
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      - description: Filter by title
        in: query
        name: title
        type: string
      - description: Filter by author
        in: query
        name: author
        type: string
      - description: Filter by category ID
        in: query
        name: category_id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.SuccessResponse'
            - properties:
                ' paginate':
                  $ref: '#/definitions/utils.Paginate'
                data:
                  items:
                    $ref: '#/definitions/model.BookWithCategory'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: GetAllBooks
      tags:
      - Books
    post:
      consumes:
      - application/json
      description: Create a new book
      parameters:
      - description: Bearer token for authentication
        in: header
        name: Authorization
        required: true
        type: string
      - description: Book data
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/model.Book'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/utils.SuccessResponse'
            - properties:
                message:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: CreateBook
      tags:
      - Books
  /v1/books/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a book by ID
      parameters:
      - description: Bearer token for authentication
        in: header
        name: Authorization
        required: true
        type: string
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            allOf:
            - $ref: '#/definitions/utils.SuccessResponse'
            - properties:
                message:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: DeleteBook
      tags:
      - Books
    get:
      consumes:
      - application/json
      description: Get book by ID
      parameters:
      - description: Bearer token for authentication
        in: header
        name: Authorization
        required: true
        type: string
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/model.BookWithCategory'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: GetBookByID
      tags:
      - Books
    put:
      consumes:
      - application/json
      description: Update an existing book
      parameters:
      - description: Bearer token for authentication
        in: header
        name: Authorization
        required: true
        type: string
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      - description: Book data
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/model.Book'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/model.Book'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: UpdateBook
      tags:
      - Books
  /v1/lendings:
    get:
      consumes:
      - application/json
      description: Get all lending records
      parameters:
      - description: Bearer token for authentication
        in: header
        name: Authorization
        required: true
        type: string
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      - description: Filter by member ID
        in: query
        name: member_id
        type: integer
      - description: Filter by book ID
        in: query
        name: book_id
        type: integer
      - description: Filter by status
        enum:
        - borrowed
        - returned
        in: query
        name: status
        type: string
      - description: Filter by start date (YYYY-MM-DD)
        in: query
        name: start_date
        type: string
      - description: Filter by end date (YYYY-MM-DD)
        in: query
        name: end_date
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.SuccessResponse'
            - properties:
                ' paginate':
                  $ref: '#/definitions/utils.Paginate'
                data:
                  items:
                    $ref: '#/definitions/model.Lending'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get All Lendings
      tags:
      - Lending
    post:
      consumes:
      - application/json
      description: Create a new lending record
      parameters:
      - description: Bearer token for authentication
        in: header
        name: Authorization
        required: true
        type: string
      - description: Lending data
        in: body
        name: lending
        required: true
        schema:
          $ref: '#/definitions/model.Lending'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/utils.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/model.Lending'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create Lending
      tags:
      - Lending
  /v1/lendings/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a lending record by ID
      parameters:
      - description: Bearer token for authentication
        in: header
        name: Authorization
        required: true
        type: string
      - description: Lending ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.SuccessResponse'
            - properties:
                data:
                  type: string
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete Lending
      tags:
      - Lending
    get:
      consumes:
      - application/json
      description: Get a lending record by ID
      parameters:
      - description: Bearer token for authentication
        in: header
        name: Authorization
        required: true
        type: string
      - description: Lending ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/model.Lending'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get Lending by ID
      tags:
      - Lending
    put:
      consumes:
      - application/json
      description: Update a lending record by ID
      parameters:
      - description: Bearer token for authentication
        in: header
        name: Authorization
        required: true
        type: string
      - description: Lending ID
        in: path
        name: id
        required: true
        type: integer
      - description: Lending data
        in: body
        name: lending
        required: true
        schema:
          $ref: '#/definitions/model.Lending'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/model.Lending'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update Lending
      tags:
      - Lending
  /v1/login:
    post:
      consumes:
      - application/json
      description: Login user with email and password
      parameters:
      - description: User login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/model.Credentials'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/utils.TokenResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Login user
      tags:
      - User
  /v1/members:
    get:
      consumes:
      - application/json
      description: List all members
      parameters:
      - description: Bearer token for authentication
        in: header
        name: Authorization
        required: true
        type: string
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      - description: Filter by name
        in: query
        name: name
        type: string
      - description: Filter by email
        in: query
        name: email
        type: string
      - description: Filter by phone
        in: query
        name: phone
        type: string
      - description: Filter by address
        in: query
        name: address
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.SuccessResponse'
            - properties:
                ' paginate':
                  $ref: '#/definitions/utils.Paginate'
                data:
                  items:
                    $ref: '#/definitions/model.Member'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List Members
      tags:
      - Member
    post:
      consumes:
      - application/json
      description: Create a new member
      parameters:
      - description: Bearer token for authentication
        in: header
        name: Authorization
        required: true
        type: string
      - description: Member data
        in: body
        name: member
        required: true
        schema:
          $ref: '#/definitions/model.Member'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/utils.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/model.Member'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create Member
      tags:
      - Member
  /v1/members/{id}:
    get:
      consumes:
      - application/json
      description: Get member by ID
      parameters:
      - description: Bearer token for authentication
        in: header
        name: Authorization
        required: true
        type: string
      - description: Member ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/model.Member'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get Member by ID
      tags:
      - Member
  /v1/register:
    post:
      consumes:
      - application/json
      description: Register a new user with name, email, password, and role
      parameters:
      - description: User registration data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/model.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Register a new user
      tags:
      - User
schemes:
- http
swagger: "2.0"
